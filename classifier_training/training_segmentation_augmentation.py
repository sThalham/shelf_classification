import numpy as np
import cv2
from skimage.transform import resize
from skimage import img_as_bool
import os


# Path to the masks generated by Mask RCNN
path_mask = "./images_segmentation_augmented"
# Path to the corresponding images
path_im = "./images_unaugmented"
# Output Path
path_out = "./images_unaugmented"

# Select the output image dimensions
DESIRED_IMG_HEIGHT = 168
DESIRED_IMG_WIDTH = 224


for set in ["test", "train", "val"]:
    for type in ["bucket", "hanging", "standing"]:
        for filename in os.listdir(path_im + "/" + set + "/" + type):
            # Load images and masks
            img = cv2.imread(path_im + "/" + set + "/" + "/" + type + "/" + filename)
            segmentations = np.load(path_mask + "/" + set + "/" + type + "/" + filename + ".npy.npz")['arr_0']
            bool_mask = np.any(segmentations, axis=2)
            bool_mask_resized = img_as_bool(resize(bool_mask, (DESIRED_IMG_HEIGHT, DESIRED_IMG_WIDTH)))

            # Replace masks with random noise
            rng = np.random.default_rng()
            rand_image = rng.integers(low=0, high=255, size=(DESIRED_IMG_HEIGHT, DESIRED_IMG_WIDTH, 3), dtype=np.uint8)
            height, width, _ = img.shape
            # Resize if necessary
            if height is DESIRED_IMG_HEIGHT and width is DESIRED_IMG_WIDTH:
                img[bool_mask_resized] = rand_image[bool_mask_resized]
            else:
                img = resize(img, (DESIRED_IMG_HEIGHT, DESIRED_IMG_WIDTH, 3)) * 255.0
                img[bool_mask_resized] = rand_image[bool_mask_resized]

            # Save augmented image
            cv2.imwrite(path_out + "/" + set + "/" + type + "/" + filename, img)


